// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: docs.proto

package docsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Documents_Create_FullMethodName  = "/documents.Documents/Create"
	Documents_Update_FullMethodName  = "/documents.Documents/Update"
	Documents_Process_FullMethodName = "/documents.Documents/Process"
)

// DocumentsClient is the client API for Documents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentsClient interface {
	Create(ctx context.Context, in *UserTDocument, opts ...grpc.CallOption) (*TDocument, error)
	Update(ctx context.Context, in *UserTDocument, opts ...grpc.CallOption) (*TDocument, error)
	Process(ctx context.Context, in *TDocument, opts ...grpc.CallOption) (*TDocument, error)
}

type documentsClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentsClient(cc grpc.ClientConnInterface) DocumentsClient {
	return &documentsClient{cc}
}

func (c *documentsClient) Create(ctx context.Context, in *UserTDocument, opts ...grpc.CallOption) (*TDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TDocument)
	err := c.cc.Invoke(ctx, Documents_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) Update(ctx context.Context, in *UserTDocument, opts ...grpc.CallOption) (*TDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TDocument)
	err := c.cc.Invoke(ctx, Documents_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) Process(ctx context.Context, in *TDocument, opts ...grpc.CallOption) (*TDocument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TDocument)
	err := c.cc.Invoke(ctx, Documents_Process_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentsServer is the server API for Documents service.
// All implementations must embed UnimplementedDocumentsServer
// for forward compatibility
type DocumentsServer interface {
	Create(context.Context, *UserTDocument) (*TDocument, error)
	Update(context.Context, *UserTDocument) (*TDocument, error)
	Process(context.Context, *TDocument) (*TDocument, error)
	mustEmbedUnimplementedDocumentsServer()
}

// UnimplementedDocumentsServer must be embedded to have forward compatible implementations.
type UnimplementedDocumentsServer struct {
}

func (UnimplementedDocumentsServer) Create(context.Context, *UserTDocument) (*TDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDocumentsServer) Update(context.Context, *UserTDocument) (*TDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDocumentsServer) Process(context.Context, *TDocument) (*TDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedDocumentsServer) mustEmbedUnimplementedDocumentsServer() {}

// UnsafeDocumentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentsServer will
// result in compilation errors.
type UnsafeDocumentsServer interface {
	mustEmbedUnimplementedDocumentsServer()
}

func RegisterDocumentsServer(s grpc.ServiceRegistrar, srv DocumentsServer) {
	s.RegisterService(&Documents_ServiceDesc, srv)
}

func _Documents_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Documents_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).Create(ctx, req.(*UserTDocument))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Documents_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).Update(ctx, req.(*UserTDocument))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Documents_Process_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).Process(ctx, req.(*TDocument))
	}
	return interceptor(ctx, in, info, handler)
}

// Documents_ServiceDesc is the grpc.ServiceDesc for Documents service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Documents_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "documents.Documents",
	HandlerType: (*DocumentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Documents_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Documents_Update_Handler,
		},
		{
			MethodName: "Process",
			Handler:    _Documents_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "docs.proto",
}
